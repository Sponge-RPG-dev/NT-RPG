import org.gradle.api.internal.tasks.DefaultTaskOutputs

import java.nio.file.Files
import java.nio.file.StandardCopyOption

plugins {
    id 'java-library'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id "xyz.jpenilla.run-paper" version "1.0.4"
}

repositories {
    mavenCentral()
    maven {
        url "https://papermc.io/repo/repository/maven-public/"
        content {
            includeGroupByRegex "(net\\.Indyuce|io\\.lumine)"
        }
    }
    maven {
        url "https://hub.spigotmc.org/nexus/content/repositories/snapshots"
    }
    maven {
        url "https://mvn.lumine.io/repository/maven-public/"
    }
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
    maven {
        url "https://repo.codemc.org/repository/maven-public/"
    }
    maven {
        url = "https://repo.extendedclip.com/content/repositories"
    }
    maven {
        url "https://repo.dmulloy2.net/repository/public/"
    }

    maven {
        url = "https://repo.citizensnpcs.co"
    }
}

group = 'cz.neumimto.rpg'
version = project.p_spigot_version

dependencies {
    implementation fileTree(dir: 'lib-cp', include: '*.jar')
    compileOnly fileTree(dir: 'lib', include: '*.jar')

    annotationProcessor project(':Generator')

    api project(':Common')
    api project(':FlatFiles-Persistence')
    api project(":Spigot-NMS")

    // api 'com.github.stefvanschie.inventoryframework:IF:' + project.if

    compileOnly 'io.papermc.paper:paper-api:' + project.spigotapi

    compileOnly"com.denizenscript:denizen:1.2.3-SNAPSHOT"
    compileOnly("org.spigotmc:plugin-annotations:" + project.pluginannotations) {
        exclude group: "org.bukkit", module: "bukkit"
    }

    compileOnly("com.comphenix.protocol:ProtocolLib:" + project.protocollib) {
        exclude group: "com.comphenix.executors", module: "BukkitExecutors"
    }

    api 'com.elmakers.mine.bukkit:EffectLib:' + project.effectlib
    api 'com.github.stefvanschie.inventoryframework:IF:' + project.if
    api 'net.kyori:adventure-platform-bukkit:4.1.1'


    //  compileOnly 'placeholderapi.me.clip:placeholderapi:' + project.papi
    compileOnly 'com.gmail.filoghost.holographicdisplays:holographicdisplays-api:' + project.hdisplays
    compileOnly "co.aikar:acf-paper:" + project.acf
    compileOnly "io.papermc.paper:paper-api:1.17.1-R0.1-SNAPSHOT"
    compileOnly "ru.endlesscode.mimic:mimic-bukkit-api:" + project.mimic

    compileOnly('net.Indyuce:MMOItems:' + project.mmoitems) {
        exclude group: 'com.mojang', module: 'authlib'
        exclude group: 'org.jetbrains', module: 'annotations'
    }
    compileOnly('io.lumine:MythicLib-dist:' + project.mythiclib)

    compileOnly 'io.lumine:Mythic:' + project.mythicmobs

    //compileOnly 'io.lumine:Mythic-API:' + project.mythicmobs
    compileOnly 'io.lumine:Mythic-Plugin:' + project.mythicmobs
    compileOnly 'io.lumine:Mythic-Dist:' + project.mythicmobs
    compileOnly 'io.lumine:LumineUtils:1.16.1-SNAPSHOT'

    compileOnly 'com.gitlab.SamB440:RPGRegions-2:' + project.rpgregions

    compileOnly 'net.luckperms:api:5.4'

    compileOnly 'com.github.oraxen:oraxen:-SNAPSHOT'
    compileOnly 'net.kyori:adventure-platform-bukkit:4.1.0'
    compileOnly 'com.github.LoneDev6:API-ItemsAdder:3.1.0b'

}

shadowJar {
    archiveFileName = "NT-RPG-${p_spigot_version}.jar"
    libsDirName = '../../../server-spigot/plugins'

    relocate 'com.electronwill', 'rpgshaded.com.electronwill'
    //todo  relocate 'com.github.stefvanschie', 'rpgshaded.com.github.stefvanschie'
    relocate 'com.google.inject', 'rpgshaded.com.google.inject'
    relocate 'com.squareup.javapoet', 'rpgshaded.com.squareup.javapoet'
    relocate 'com.typesafe.config', 'rpgshaded.com.typesafe.config'
    relocate 'javax.inject', 'rpgshaded.javax.inject'
    //  relocate 'net.bytebuddy', 'rpgshaded.net.bytebuddy'
    relocate 'org.aopalliance', 'rpgshaded.org.aopalliance'
    relocate 'org.codehaus', 'rpgshaded.org.codehaus'
    relocate 'de.slikey.effectlib', 'rpgshaded.de.slikey.effectlib'

    mergeServiceFiles()
}

task copyNMSImpl {
    Project spigot = project(":Spigot")
    var map = new HashMap<String, String>();
    map.put(':Spigot-119',"Spigot-119-1.0.0-SNAPSHOT.jar");
    map.put(':Spigot-118',"Spigot-118-1.0.0-SNAPSHOT.jar");

    def set = map.entrySet();
    for (Map.Entry<String,String> impl : set) {
        if (spigot.file(impl.value).exists()) {
            return;
        }

        DefaultTaskOutputs output = project(impl.key).jar.outputs

        boolean found = false;
        for (File file : output.getFiles()) {
            for (File f : file.getParentFile().listFiles(new FilenameFilter() {
                @Override
                boolean accept(File directory, String name) {
                    if (name.endsWith("dev.jar") || name.endsWith("sources.jar")) {
                        return false
                    }
                    return true;
                }
            })) {
                var p = spigot.file("lib-cp/").toPath().resolve(f.getName())
                var v = f.exists();
                try {
                    Files.copy(f.toPath(), p, StandardCopyOption.REPLACE_EXISTING);
                } catch (Exception e) {
                    e.printStackTrace()
                }
                found = true;
                break;
            }
            break;
        }
    }
}

shadowJar.dependsOn copyNMSImpl
build.dependsOn shadowJar
build.mustRunAfter tasks.getByPath(':Common:build')
build.mustRunAfter tasks.getByPath(':Spigot-118:build')
build.mustRunAfter tasks.getByPath(':Spigot-119:build')
build.mustRunAfter tasks.getByPath(':FlatFiles-Persistence:build')

