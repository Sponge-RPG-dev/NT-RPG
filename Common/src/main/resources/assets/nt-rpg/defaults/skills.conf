Skills: [
  {
    #This skill is equivalent of a javaskill cz.neumimto.skills.active.SkillMegabolt.
    # Id must be unique
    Id: "ntrpg:megabolt2"
    SuperType: "Active"

    # Skill types
    Skill-Types: [
      "ntrpg:aoe",
      "ntrpg:lightning"
      "ntrpg:elemental"
    ]

    # If the skill may deal damage there must be node DamageType.
    # If the skill deals no damage to anyone (eg simple healing) this node should not be defined
    Damage-Type: "MAGIC"
    Handler: "nts"

    Script: """
        # read skill settings configuration values
        # $settings.X is a macro (shortcut) for config_value{ctx=@context, key="X"}
        @damage = $settings.damage
        @radius = $settings.radius

        @nearby_entities = find_nearby_entities{radius=@radius, entity=@caster}

        FOREACH @entity in @nearby_entities

            #With SuperType Active we can use reference @caster in our script
            IF damage{damager=@caster, target=@entity, damage=@damage, knockback=0, skill=@this_skill}
               lightning{at_entity=@entity}
            END
        END

        RETURN SkillResult.OK
    """
  }
  {
    Id: "id:vitalize"
    Skill-Types: [
      "ntrpg:healing"
    ]
    Handler: "ntrpg:periodic_regeneration"
  }
  {
    # AOE Stun and damage
    Id: "ntrpg:wrestle"
    SuperType: "Active"
    Handler: "nts"
    Skill-Types: [
      "ntrpg:aoe",
      "ntrpg:physical"
    ]
    Damage-Type: PHYSICAL
    Script: """
        @duration = $settings.duration
        @damage = $settings.damage
        @radius = $settings.radius

        @nearby_entities = find_nearby_entities{radius=@radius, e=@caster}

        FOREACH @entity in @nearby_entities
            IF damage{damager=@caster, target=@entity, damage=@damage}
                @effect = StunEffect{target=@entity, duration=@duration}
                add_effect{effect=@effect, es=@caster, source=@this_skill}
            END
        END

        RETURN SkillResult.OK
    """
  }
  {
    Id: "ntrpg:iceshot"
    SuperType: "Active"
    Skill-Types: [

    ]
    Damage-Type: MAGIC
    Handler: "ntrpg:iceshot"
  }
  {
    Id: "ntrpg:lightningstrike"
    Handler: "nts"
    SuperType: "Targeted"
    Skill-Types: [
        "ntrpg:elemental"
        "ntrpg:lightning"
        "ntrpg:damage_check_target"
    ]
    Damage-Type: LIGHTNING
    Script: """
        # Read skill settings configuration values
        # $settings.X is a "shortcut" for config_value{ctx=@context, key="X"}
        @damage = $settings.damage

        # With SuperType Targeted we can use reference @caster and @target in our script
        IF damage{damager=@caster, target=@target, damage=@damage, k=0, s=@this_skill}
            lightning{at_entity=@target}
        END
        RETURN SkillResult.OK
    """
  }
  {
    Id: "ntrpg:kick"
    Handler: "nts"
    SuperType: "Targeted"
    Skill-Types: [
        "ntrpg:physical"
        "ntrpg:damage_check_target"
    ]
    Damage-Type: CONTACT
    Script: """
        @damage = $settings.damage

        # With SuperType Targeted we can use reference @caster and @target in our script
        IF damage{damager=@caster, target=@target, damage=@damage, k=0, s=@this_skill}
            @x = random{} * 0.4
            @z = random{} * 0.4
            @vector = Vector{x=@x, y=0.8, z=@z}
            set_velocity{v=@vector, e=@target}

            particle{e=@target, a=2, p=Particle.EXPLOSION_NORMAL}
        END

        RETURN SkillResult.OK
    """
  }
  {
    Id: "ntrpg:web"
    Handler: "nts"
    SuperType: "Targeted"
    Skill-Types: [
        "ntrpg:summon"
        "ntrpg:damage_check_target"
    ]
    Damage-Type: CONTACT
    Script: """
        @duration = $settings.duration

        @effect = WebEffect{e=@target,d=@duration}
        add_effect{effect=@effect, es=@caster, source=@this_skill}

        RETURN SkillResult.OK
    """
  }
  {
    Id: "ntrpg:swapposition"
    Handler: "nts"
    SuperType: "Targeted"
    Skill-Types: [
        "ntrpg:movement"
        "ntrpg:damage_check_target"
    ]
    Damage-Type: CONTACT
    Script: """
        @duration = $settings.duration

        @targetLoc = get_location{e=@target}
        @sourceLoc = get_location{e=@caster}

        particle{l=@targetLoc, p=Particle.PORTAL, a=20, ox=5, oy=3, oz=5}
        particle{l=@sourceLoc, p=Particle.PORTAL, a=20, ox=5, oy=3, oz=5}

        teleport{e=@target, l=@sourceLoc}
        teleport{e=@caster, l=@targetLoc}

        RETURN SkillResult.OK
    """
  }
  {
    Id: "ntrpg:invisibility"
    Handler: nts
    SuperType: Active
    Skill-Types: [
        "ntrpg:ILLUSION"
        "ntrpg:STEALTH"
    ]
    Script: """
        @duration = $settings.duration

        @effect = InvisibilityEffect{e=@caster, duration=@duration}
        add_effect{effect=@effect, es=@caster, source=@this_skill}

        @location = get_location{e=@caster}
        particle{l=@location, p=Particle.SMOKE_NORMAL,a=5}

        return SkillResult.OK
    """
  }
  {
    Id: "ntrpg:flicker"
    Handler: nts
    SuperType: Active
    Skill-Types: [
        "ntrpg:ILLUSION"
        "ntrpg:STEALTH"
    ]
    Script: """
        @duration = $settings.duration
        @invisDuration = $settings.invisDuration

        @effect = FlickerEffect{e=@caster, duration=@duration, id=@invisDuration}
        add_effect{effect=@effect, es=@caster, source=@this_skill}

        @location = get_location{e=@caster}
        particle{l=@location, p=Particle.SMOKE_NORMAL,a=5}

        return SkillResult.OK
    """
  }
  {
    Id: "ntrpg:teleport"
    Handler: nts
    SuperType: TargetedBlock
    Skill-Types: [
        "MOVEMENT"
    ]
    Script: """
        @location = @block.location

        @caster_location = get_location{e=@caster}

        @pitch = @caster_location.pitch
        @yaw = @caster_location.yaw

        sound{s=Sound.ENTITY_ENDERMAN_TELEPORT, l=@caster_location,v=0.5,p=0.5}
        particle{l=@location, p=Particle.PORTAL,a=40, ox=2,oy=2,oz=2}

        teleport{e=@caster, l=@location, p=@pitch, y=@yaw, rbf=@blockFace}

        particle{l=@location, p=Particle.REVERSE_PORTAL,a=40, ox=2,oy=2,oz=2}

        return SkillResult.OK
    """
  }
  {
    Id: "ntrpg:piggify"
    Handler: nts
    SuperType: Targeted
    Skill-Types: [
       "ntrpg:summon"
       "ntrpg:damage_check_target"
    ]
    Script: """
       @duration = $settings.duration
       @effect = PiggifyEffect{e=@target,d=@duration}
       add_effect{effect=@effect, es=@caster, source=@this_skill}
       return SkillResult.OK
    """
  }
  {
    Id: "ntrpg:arrowblast"
    Handler: nts
    SuperType: Active
    Script: """
       @arrows = $settings.arrows
       @dmin = $settings.damageMin
       @dmax = $settings.damageMax
       @p = $settings.period
       @v = $settings.velocity

       @effect = ArrowBlastEffect{c=@caster, a=@arrows, dmin=@dmin, dmax=@dmax, period=@p, velocity=@v}
       add_effect{effect=@effect, es=@caster, source=@this_skill}

       return SkillResult.OK
    """
  }
  {
    Id: "ntrpg:basher"
    Handler: nts
    SuperType: Passive
    RelevantEffectId: BasherEffect
    Script: """
       @chance = $settings.change
       @exDamage = $settings.extraDamage
       @stunDuration = $settings.stunDuration

       @effect = BasherEffect{}
       @effect.stunDuration = @stunDuration
       @effect.chance = @chance
       @effect.extraDamage = @exDamage
       @effect.consumer = @caster

       add_effect{effect=@effect, es=@caster, source=@this_skill}

       RETURN
    """
  }
  {
    Id: "ntrpg:devourMagic"
    Handler: nts
    SuperType: Active
    Script: """
       @duration = $settings.duration
       @multiplier = $settings.multiplier

       @effect = DevourMagicEffect{}
       @effect.consumer = @caster
       @effect.duration = @duration
       @effect.multiplier = @multiplier
       @effect.period = 1000

       add_effect{effect=@effect, es=@caster, source=@this_skill}

       return SkillResult.OK
    """
  }
  {
    Id: "ntrpg:creepingPain"
    Handler: nts
    SuperType: Targeted
    Skill-Types: [
       "ntrpg:damage_check_target"
    ]
    Script: """
       @duration = $settings.duration
       @mult = $settings.multiplier
       @effect = CreepingPainEffect{}
       @effect.consumer = @target
       @effect.duration = @duration
       @effect.multiplier = @mult
       @effect.period = 1000
       @effect.damageTreshold = $settings.damageTreshold
       @effect.skill = @this_skill
       @effect.effectCaster = @caster

       add_effect{effect=@effect, es=@caster, source=@this_skill}

       return SkillResult.OK
    """
  }
  {
    Id: Boltstorm
    SuperType: Active
    Handler: nts
    Skill-Types: [
       "ntrpg:elemental"
       "ntrpg:lightning"
       "ntrpg:damage_check_target"
    ]
    Script: """
        @duration = $settings.duration
        @period = $settings.period
        @effect = BoltstormEffect{}
        @effect.consumer = @caster
        @effect.duration = @duration
        @effect.period = @period
        @effect.radius = $settings.radius
        @effect.damageMin = $settings.damageMin
        @effect.damageMax = $settings.damageMax
        @effect.skill = @this_skill

        add_effect{effect=@effect, es=@caster, source=@this_skill}

        RETURN SkillResult.OK
    """
  }
]
Effects: [
    {
        Id: DevourMagicEffect
        SuperType: UnstackableEffect
        Fields {
            multiplier: numeric
        }
    }
    {
        Id: BasherEffect
        SuperType: UnstackableEffect
        Fields {
            chance: numeric
            extraDamage: numeric
            stunDuration: numeric
        }
    }
    {
        Id: CreepingPainEffect
        SuperType: UnstackableEffect
        Fields {
            multiplier: numeric
            damageTreshold: numeric
            damageTaken: numeric
            skill: "cz.neumimto.rpg.common.skills.ISkill"
            effectCaster: "cz.neumimto.rpg.common.entity.IEntity"
        }
        OnRemove: """
           @damage = min{a=@effect.damageTaken, b=@effect.damageTreshold}
           IF damage{damager=@effect.effectCaster, target=@effect.consumer, damage=@damage, knockback=0, skill=@effect.skill}

           END

           RETURN
        """
        OnTick: """

           RETURN
        """
    }
    {
        Id: BoltstormEffect
        SuperType: UnstackableEffect
        Fields {
            damageMax: numeric
            damageMin: numeric
            radius: numeric
            damageMin: numeric
            damageMax: numeric
            skill: "cz.neumimto.rpg.common.skills.ISkill"
        }
        OnTick: """
            @entity = find_random_entity{damageCheck=T, r=@effect.radius, e=@effect.consumer}
            IF exists{var=@entity}
                @damage = min{a=@effect.damageMin, b=@effect.damageMax}
                IF damage{damager=@effect.consumer, target=@entity, damage=@damage, s=@effect.skill}
                    lightning{at_entity=@entity}
                END
            END

            RETURN
        """
    }
]
Listeners: [
    {
        Id: InternalSkillListener
        Event: IEntitySkillDamageLateEvent
        Script: """
            @target = @event.target
            @effect = get_effect{e=@target, en="DevourMagicEffect"} as DevourMagicEffect
            IF exists{var=@effect}
                @damage = @event.damage
                @mana = @effect.multiplier * @event.damage
                @event.damage = @damage - @mana
                gain_resource{e=@target, a=@mana, s=@effect,r="mana"}
            END

            RETURN
        """
    }
    {
        Id: InternalSkillListener2
        Event: IEntityWeaponDamageEarlyEvent
        Script: """
            @target = @event.target
            @damager = @event.damager

            @effect = get_effect{e=@damager, en="BasherEffect"} as BasherEffect
            IF exists{var=@effect}
                IF roll{pass=@effect.chance, maxVal=100}
                   @damage = @event.damage + @effect.extraDamage
                   @event.damage = @damage
                   @stunDuration = @effect.stunDuration
                   @stunEffect = StunEffect{target=@target, duration=@stunDuration}
                   add_effect{effect=@stunEffect, es=@damager, source=@effect}
                END
            END


            @cpeffect = get_effect{e=@target, en="CreepingPainEffect"} as CreepingPainEffect
            IF exists{var=@cpeffect}
                @cpeffect.damageTaken = @cpeffect.damageTaken + @event.damage
            END

            RETURN
        """
    }
]